import pandas as pd

# Примерный датафрейм
df = pd.DataFrame({
    'category': ['A', 'A', 'B', 'B', 'C', 'C'],
    'value': [10, 15, 10, 20, 30, 25],
    'score': [1, 2, 3, 4, 5, 6]
})

# 1. Сумма значений по каждой категории
print(df.groupby('category').sum())  # Суммирует числовые столбцы по группам

# 2. Среднее значение по каждой категории
print(df.groupby('category').mean())  # Вычисляет среднее по каждому числовому столбцу

# 3. Количество НЕпустых значений по каждой категории
print(df.groupby('category').count())  # Считает количество значений в каждой колонке

# 4. Минимальные значения в каждой группе
print(df.groupby('category').min())  # Находит минимальное значение по каждой колонке

# 5. Максимальные значения в каждой группе
print(df.groupby('category').max())  # Находит максимальное значение по каждой колонке

# 6. Количество строк в каждой группе (в отличие от count, это по строкам)
print(df.groupby('category').size())  # Возвращает количество строк в каждой группе

# 7. Первая строка в каждой группе
print(df.groupby('category').first())  # Первая запись в каждой категории

# 8. Последняя строка в каждой группе
print(df.groupby('category').last())  # Последняя запись в каждой категории

# 9. Вторая (1-я по индексу) строка в каждой группе
print(df.groupby('category').nth(1))  # Извлекает n-ую строку из каждой группы

# 10. Агрегация: разные функции для разных колонок
print(df.groupby('category').agg({'value': 'mean', 'score': 'sum'}))
# value -> среднее, score -> сумма

# 11. Применение пользовательской функции к каждой группе
print(df.groupby('category').apply(lambda x: x['value'].sum() / len(x)))
# Делит сумму value на количество строк в группе (среднее вручную)

# 12. Добавление колонки со средним значением внутри группы
df['value_mean'] = df.groupby('category')['value'].transform('mean')
print(df)
# Каждой строке присваивается среднее значение value по её категории
